<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0069)https://www.cs.colostate.edu/~cs514dl/2019fa/more_assignments/a01.php -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
   <title> Assignment A1</title>   
   <link href="./Assignment A1_files/styles.css" rel="stylesheet" type="text/css"> 
</head>

<body>

<div id="page">

<div id="banner">
    <!-- Left side course logo acts as another link to course homepage -->
	<div align="left">
	    <a href="https://www.cs.colostate.edu/~cs514dl/2019fa/index.php" title="Course Homepage">
		<img src="./Assignment A1_files/cs514_logo.png" alt="CS 514 Software Product and Process Evaluation" width="250" height="120" align="left" style="border:0px;">
        </a>
	</div>
	<!-- Right side CSU logo is a link to CSU main homepage -->
	<div align="right">  
		<a href="http://welcome.colostate.edu/" title="CSU Welcome Page">
		<img src="./Assignment A1_files/co_state_univ_fr_grn_glow.png" alt="CSU Logo" width="205" height="91" align="right" border="0" style="padding:8px;">
	    </a> 
	</div>
	<!-- Center of banner provides course title, course subtitle, department name and line, and finally term -->
	<div id="topTitle">
		<p class="courseTitle">CS 514 Software Product and Process Evaluation</p>
		<p class="courseSubTitle">
		    <span> Fall 2019</span> <br> 
		    <span> <a href="http:////www.cs.colostate.edu">Computer Science Department</a></span><br><br>
		    <span style="font-style:italic"> Assignment A1 </span><br>
		</p>
	</div>
</div>

<div id="navigation">
   <span class="navMenuItem"><a class="navi" href="https://www.cs.colostate.edu/~cs514dl/2019fa/index.php">Home</a></span>
   <span class="navMenuItem"><a class="navi" href="https://www.cs.colostate.edu/~cs514dl/2019fa/home_syllabus.php">Syllabus</a></span>
   <span class="navMenuItem"><a class="navi" href="https://www.cs.colostate.edu/~cs514dl/2019fa/home_progress.php">Progress</a></span>
   <span class="navMenuItem"><a class="navi" href="https://www.cs.colostate.edu/~cs514dl/2019fa/home_resources.php">Resources</a></span>
   <span class="navMenuItem"><a class="navi" href="https://www.cs.colostate.edu/~cs514dl/2019fa/termproject/termproject.php">Project</a></span>
   <span class="navMenuItem"><a class="navi" href="http://info.canvas.colostate.edu/">Canvas</a></span> 
</div>
   
  
<!-- Start contents of main page here. -->

<div id="contents">
   <div class="indented">
   
<h3 align="CENTER">
Test Driven Development using Java and JUnit
</h3>

<center>
<h4><font color="DARKRED">DUE:</font>
        11:59PM, Wednesday 11 September 2019</h4>
<h4>30 points</h4>
</center>

<hr noshade="" size="3" color="GREEN">


<h2>1. Objectives</h2>

<ul>
  <li>Use Test Driven Development.
  </li><li>Use JUnit to write unit tests while implementing a new program. 
</li></ul>

<hr noshade="" size="3" color="GREEN">

<h2>2. Tasks</h2>

<p align="justify"><font color="Red">DO NOT add any new public methods to your implementation classes. You are welcome to add private helper methods. The reason is that we don't want your tests to call new public methods that we are not aware of. Your tests won't compile with our code if they depend on methods that our implementation does not have.</font></p>

<p align="justify">
Note that all the classes that you will implement below must be inside a package called <tt>a1</tt>. For the ease of understanding the program, we describe the tasks related to the program implementation before listing the tasks related to the unit tests. However, you will use test driven development, where you will write your test cases to specify the program.
</p>

<h3>2.1. Implementing the Modified Chess program</h3>

<p align="justify">
We are just creating a toy chess program that lets you set up pieces on a chessboard, move them, and find possible moves for a given piece in a certain position. We are not implementing Deep Blue. Because we are simplifying so many rules, we'll call this game, <u><b>M</b>odified ch<b>ESS</b></u> or <b>MESS</b>!


</p>

<p align="justify">
Chess is played on an 8 X 8 board where the initial placement of pieces is as shown in the following figure, taken from <a href="https://en.wikipedia.org/wiki/Chess">Wikipedia</a>. Note the indexing scheme. The white king is on e1, and the black king is on e8. Familiarize yourself with the names of the pieces.
</p>

<img src="./Assignment A1_files/Chess_board_blank.svg" alt="Chess Board">
<p></p>

<p align="justify">
Each chess piece can move in a specific way. Details of the original rules are provided <a href="http://en.wikipedia.org/wiki/Chess#Movement">here</a>. However, we will follow a simplified version in this assignment. Most importantly, we will ignore an important rule in chess: Moving any piece in a way that puts your own king in <i>check</i> is illegal. Since we don't know what <i>check</i> means, for us a move is legal if the piece we are moving has an empty square to move to or can capture (replace) an opponent's piece (including their king, although that's also illegal in real chess). The simplified rules are as follows:

</p><ul>
<li> Assume that the queen and knight can't move.
<p>
</p></li><li> The king can only move one square horizontally, vertically, or diagonally. Assume that it cannot <a href="https://en.wikipedia.org/wiki/Castling">castle</a>.  
<p>
</p></li><li> A pawn in the initial position may move one or two squares vertically forward to an empty square but cannot leap over any piece. Subsequently it can move only one square vertically forward to an empty square. A pawn may also capture (replace) an opponent's piece diagonally one square in front of it.  Pawns can never move backwards. These are the only moves; we will not implement the <a href="http://en.wikipedia.org/wiki/En_passant">En passant</a> rule and will also not allow <a href="http://en.wikipedia.org/wiki/Promotion_(chess)">promotion</a> to another piece if the pawn reaches the end of the column. If you don't know what these rules are, don't worry. We won't use them.
<p>
</p></li><li> A rook can move any number of squares horizontally or vertically, forward or backward, as long as it does not have to leap over other pieces. At the end of the move, it can occupy a previously empty square or capture (replace) an opponent's piece but it cannot replace another piece of the same player. 
<p>
</p></li><li> A bishop can move any number of squares diagonally in any direction as long as it does not have to leap over other pieces. At the end of the move, it can occupy a previously empty square or capture (replace) an opponent's piece but it cannot replace another piece of the same player.
<p>
</p></li></ul>

<p align="justify">
You will implement eight classes <tt>ChessBoard</tt>, <tt>ChessPiece</tt>, <tt>Rook</tt>, <tt>Knight</tt>, <tt>Bishop</tt>, <tt>Queen</tt>, <tt>King</tt>, and <tt>Pawn</tt>, and two exception classes called <tt>IllegalPositionException</tt> and <tt>IllegalMoveException</tt> that are described below. 
</p>

<hr>

<h3>2.1.1. Class <tt>ChessBoard</tt></h3>

<p align="justify">
This class only stores the state of the board and its pieces for this assignment. In a real program, it would need to store more information (e.g., whoseTurn, etc). The board is represented by a 2-dimensional array of size 8X8. 
</p>

<p align="justify">
Since the positions on a chess board are represented using a letter followed by a number, our array needs to represent the directions accordingly. We will make the following association: a=0, b=1, c=2, d=3, e=4, f=5, g=6, and h=7. In the initial position, the white king at e1 is at index [0][4]. The black queen at d8 is at index [7][3].
  
</p>

<p align="justify">
<b>Implement the following attribute:</b>
</p><ul>
<li> <tt>private ChessPiece[][] board</tt>; 
</li></ul>
<p></p>

<p align="justify">
<b>Implement the following constructor:</b>
</p><ul>
<li> The no-arg constructor <tt>ChessBoard()</tt> initializes the board to an 8X8 array with all empty squares. An empty square is null.
</li></ul>
<p></p>

<p align="justify">
<b>Implement the following methods:</b>
</p><ul>
<li> <tt>public void initialize()</tt>

<p align="justify">
This method initializes the board to the standard chess opening state with indexing as shown in the figure. This method should use the constructors of the appropriate pieces, and call <tt>placePiece</tt> below to place the newly constructed pieces in the right position.
</p>

</li><li> <tt>public ChessPiece getPiece(String position) throws IllegalPositionException</tt>
<p align="justify">
This method returns the chess piece at a given position. The position is represented as a two-character string (e.g., e8) as described above. The first letter is in lowercase (a..h) and the second letter is a digit (1..8). If the position is illegal because the string contains illegal characters or represents a position outside the board, the exception is thrown.
</p>

</li><li> <tt>public boolean placePiece(ChessPiece piece, String position)</tt>

<p align="justify">
This method tries to place the given piece at a given position, and returns true if successful, and false if there is already a piece of the same player in the given position or the position was illegal for any of the two reasons mentioned in the description of <tt>getPiece</tt>. If an opponent's piece exists, that piece is captured.  If successful, this method should call an appropriate method in the <tt>ChessPiece</tt> class (i.e., <tt>setPosition</tt>) to set the piece's position.
</p>

</li><li> <tt>public void move(String fromPosition, String toPosition) throws IllegalMoveException</tt>

<p align="justify">
This method checks if moving the piece from the <tt>fromPosition</tt> to <tt>toPosition</tt> is a legal move. Legality is defined based on the rules described above in Section 2.1. If the move is legal, it executes the move, changing the value of the board as needed. Otherwise, the stated exception is thrown.
</p>

</li><li> <tt>public String toString()</tt>

<p align="justify">
You must include the following <tt>toString</tt> method to help debug your program. We assume that <tt>ChessPiece</tt> has an appropriately implemented <tt>toString</tt> method, whose implementation is described below.  The code for the method is <a href="https://www.cs.colostate.edu/~cs514dl/2019fa/more_assignments/toString.java">here</a>. <font color="Red"><b>There is no need to write JUnit tests for this method.</b></font>
</p>
</li></ul>

<p align="justify">
A barebones main method is provided for the <tt>ChessBoard</tt> class in case you want to try out the entire application at the end. Note that this method is not to be tested using JUnit.
</p><pre>public static void main(String[] args) {
    ChessBoard board = new ChessBoard();
    board.initialize();
    System.out.println(board);
    board.move("c2", "c4");
    System.out.println(board);
}
</pre>
<p></p>

<hr>

<h3>2.1.2. Abstract class <tt>ChessPiece</tt></h3>
<p align="justify">
The <b>abstract</b> class <tt>ChessPiece</tt> is the parent class for all the actual chess pieces classes. This class keeps a reference to the board the piece is on (if any), stores the position where the piece is located, and the color.
</p>

<p align="justify">
<b>Include the following enum type as shown below:</b>
</p><pre>public enum Color {WHITE, BLACK}
</pre>

<p align="justify">
<b>Implement the following attribute:</b>
</p><ul>
<li> <tt>protected ChessBoard board</tt>; // the board it belongs to, default null
</li><li> <tt>protected int row</tt>; // the index of the horizontal rows 0..7
</li><li> <tt>protected int column</tt>; // the index of the vertical column 0..7
</li><li> <tt>protected Color color</tt>; // the color of the piece
</li></ul>
<p></p>

<p align="justify">
<b>Implement the following constructor:</b>
</p><ul>
<li> <tt>public ChessPiece(ChessBoard board, Color color)</tt> 

<p align="justify">
This constructor sets the board and color attributes.
</p>
</li></ul>

<p align="justify">
<b>Implement the following methods:</b>
</p><ul>
<li> <tt>public Color getColor()</tt>
<p align="justify">
This method returns the color of the piece. There is no need for a <tt>setColor</tt> method because a piece cannot change color.
</p>
</li><li> <tt>public String getPosition()</tt> 
<p align="justify">
This method returns the position of the piece in the format single letter (a..h) followed by a single digit (1..8).
</p>
</li><li> <tt>public void setPosition(String position) throws IllegalPositionException</tt> 
<p align="justify">
This method sets the position of the piece to the appropriate row and column based on the argument, which in the format single letter (a..h) followed by a single digit (1..8). If the position is illegal for any of the two reasons mentioned earlier, throw the stated exception.
</p>
</li><li> <tt>abstract public String toString();</tt>
<p align="justify">
This method will be implemented in the concrete subclasses corresponding to each chess piece. This method returns a <tt>String</tt> composed of a single character that corresponds to which piece it is. In the <a href="http://en.wikipedia.org/wiki/Unicode">unicode</a> character encoding scheme there are characters that represent each chess piece. Use one of the following characters:
</p>

<pre> character     piece
----------   -----------
  "\u2654"   white king
  "\u2655"   white queen
  "\u2656"   white rook
  "\u2657"   white bishop
  "\u2658"   white knight
  "\u2659"   white pawn
  "\u265A"   black king
  "\u265B"   black queen
  "\u265C"   black rook
  "\u265D"   black bishop
  "\u265E"   black knight
  "\u265F"   black pawn
</pre>

<p align="justify">
It is important that your toString method return the right character string, as we will use it to display the board position when testing your code.
</p>

</li><li> <tt>abstract public ArrayList&lt;String&gt; legalMoves();</tt>
<p align="justify">
This method will be implemented in the concrete subclasses corresponding to each chess piece. This method returns all the legal moves that piece can make based on the rules described above in the assignment. Each string in the <tt>ArrayList</tt> should be the position of a possible destination for the piece (in the same format described above). If there are multiple legal moves, the order of moves in the <tt>ArrayList</tt> does not matter. If there are no legal moves, return an empty <tt>ArrayList</tt>, i.e., the size should be zero.
</p>

</li></ul>
<hr>

<h3>2.1.3. Concrete classes <tt>Rook</tt>, <tt>Knight</tt>, <tt>Bishop</tt>, <tt>Queen</tt>, <tt>King</tt>, and <tt>Pawn</tt></h3>
<p align="justify">
Implement each class to extend <tt>ChessPiece</tt> and override the methods <tt>toString</tt> and <tt>legalMoves</tt>. Note that the <tt>legalMoves</tt> methods of <tt>Knight</tt> and <tt>Queen</tt> return an empty <tt>ArrayList&lt;String&gt;</tt>.
</p>

<hr>

<h3>2.1.4. Exception classes <tt>IllegalPositionException</tt> and <tt>IllegalMoveException</tt></h3>
<p align="justify">
Implement each exception to extend <tt>Exception</tt>. 
</p>


<hr noshade="">

<h3>2.2. Implementation of JUnit test cases</h3>

<p>
Implement JUnit test classes,  called <tt>ChessBoardTest</tt>, <tt>RookTest</tt>, <tt>KnightTest</tt>, <tt>BishopTest</tt>, <tt>QueenTest</tt>, <tt>KingTest</tt>, and <tt>PawnTest</tt> containing JUnit test cases for each of the classes listed above. Also implement a JUnit test suite class called <tt>ChessSuite</tt> that defines a main method and a test suite that includes all the above test classes.
</p>

<hr noshade="" size="3" color="GREEN">


<h2>3. Submission</h2>

<p align="justify">
Create a Jar file called <tt>a1.jar</tt> containing the 18 Java files. Doublecheck that you have included source files (i.e., <tt>.java</tt> files), not compiled class files (i.e., <tt>.class</tt> files). The folder hierarchy should not include <tt>src</tt>; it should start from <tt>a1</tt>. That is, the jar file should contain <tt>a1/*.java</tt>.
</p>
<p align="justify">
Submit the <tt>a1.jar</tt> file using <b>Assignment Submission</b> in Canvas.
</p>

<hr noshade="" size="3" color="GREEN">

<h2>4. Grading criteria</h2>

<ul>
<li> Functionality of the implementation classes (implement methods correctly): 15 points.
</li><li> Functionality of test classes: 15 points.
</li><li> Packaging, creating the jar file, and submitting the the jar file correctly, using appropriate comments, following the coding style described in our slides: 5 points.

Up to 5 points may be deducted for not following the packaging structure or 
names used for the classes and the methods of each class.
</li></ul>
<p></p>

   </div>
</div> 
<!-- End of contents -->
 <!-- Entering the common footer, page termination -->

<div id="footer">
    <div id="footerLeft">
       <!-- The session time and originating IP address are dynamically generated by PHP. -->
       Session Time 0 Secs. <br>
       Originating IP 50.203.212.217 <br>
       User: 
	   <a class="foot" href="https://www.cs.colostate.edu/~cs514dl/2019fa/ztools/authenticLogin.php"> Guest </a>
       
    </div>  <!-- End of footer left division -->
    <div id="footerRight">
       <a href="http://www.cs.colostate.edu/">
          <img src="./Assignment A1_files/csBuildingLowerRight.png" alt="CS Department" height="48" width="185"></a>
    </div>  <!-- End of footer right division -->
    <div id="footerCenter">
        <a class="foot" href="http://admissions.colostate.edu/">Apply to CSU</a> |
        <a class="foot" href="http://welcome.colostate.edu/info-contact.aspx">Contact CSU</a> |
        <a class="foot" href="http://welcome.colostate.edu/info-disclaimer.aspx">Disclaimer</a> |
        <a class="foot" href="http://welcome.colostate.edu/info-equalop.aspx">Equal Opportunity</a>
        <br>
        Colorado State University, Fort Collins, CO 80523 USA<br>
        © 2015 Colorado State University
    </div> <!-- End of footer center division -->
    <div id="footerClearBottom"> <!-- Here to push enclosing div bottom below contents -->
     &nbsp;
     </div> 
</div> <!-- End of the footer division -->

</div> <!-- Closes the page contents division opened by the ct310header -->
    


</body></html>